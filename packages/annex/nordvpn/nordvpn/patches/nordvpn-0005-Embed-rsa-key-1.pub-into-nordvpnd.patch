From 24e8f7039086b09c2243dd5b44b243e608241c2b Mon Sep 17 00:00:00 2001
From: Savolro <me@savolro.com>
Date: Fri, 15 Dec 2023 09:35:00 +0200
Subject: [PATCH] Embed `rsa-key-1.pub` into nordvpnd

Signed-off-by: Savolro <me@savolro.com>
---
 ci/data.sh                                    |  1 -
 cmd/daemon/main.go                            | 11 ++-
 cmd/downloader/main.go                        |  7 +-
 daemon/response/pk_vault.go                   | 72 ----------------
 daemon/response/pk_vault_test.go              | 86 -------------------
 .../rsa => daemon/response}/rsa-key-1.pub     |  0
 daemon/response/testdata/rsa/invalid-key.pub  |  1 -
 daemon/response/testdata/rsa/test-key-1.pub   |  6 --
 daemon/response/validate.go                   | 58 +++++++++++--
 daemon/response/validate_test.go              | 56 +++++++++++-
 10 files changed, 118 insertions(+), 180 deletions(-)
 delete mode 100644 daemon/response/pk_vault.go
 delete mode 100644 daemon/response/pk_vault_test.go
 rename {contrib/rsa => daemon/response}/rsa-key-1.pub (100%)
 delete mode 100644 daemon/response/testdata/rsa/invalid-key.pub
 delete mode 100644 daemon/response/testdata/rsa/test-key-1.pub

diff --git a/ci/data.sh b/ci/data.sh
index 4fad429..928c4ed 100755
--- a/ci/data.sh
+++ b/ci/data.sh
@@ -4,7 +4,6 @@ set -euox
 source "${WORKDIR}"/ci/env.sh
 
 mkdir -p "${WORKDIR}"/dist/data
-cp "${WORKDIR}"/contrib/rsa/* "${WORKDIR}"/dist/data/
 
 go run \
 	"${WORKDIR}"/cmd/downloader/main.go "${WORKDIR}"/dist/data/
diff --git a/cmd/daemon/main.go b/cmd/daemon/main.go
index 5d9211c..c363264 100644
--- a/cmd/daemon/main.go
+++ b/cmd/daemon/main.go
@@ -3,6 +3,7 @@ package main
 
 import (
 	"crypto/sha256"
+	_ "embed"
 	"errors"
 	"fmt"
 	"log"
@@ -196,11 +197,15 @@ func main() {
 	)
 
 	// API
-
-	pkVault := response.NewFilePKVault(internal.DatFilesPath)
-	var validator response.Validator = response.NewNordValidator(pkVault)
+	var validator response.Validator
+	var err error
 	if !internal.IsProdEnv(Environment) && os.Getenv(EnvIgnoreHeaderValidation) == "1" {
 		validator = response.NoopValidator{}
+	} else {
+		validator, err = response.NewNordValidator()
+		if err != nil {
+			log.Fatalln("Error on creating validator:", err)
+		}
 	}
 
 	userAgent := fmt.Sprintf("NordApp Linux %s %s", Version, distro.KernelName())
diff --git a/cmd/downloader/main.go b/cmd/downloader/main.go
index 134996f..353affc 100644
--- a/cmd/downloader/main.go
+++ b/cmd/downloader/main.go
@@ -27,11 +27,16 @@ func main() {
 	cm := config.NewFilesystemConfigManager(config.SettingsDataFilePath, config.InstallFilePath, Salt, config.LinuxMachineIDGetter{}, config.StdFilesystemHandle{})
 	dm := daemon.NewDataManager(dataPath+InsightsFilename, dataPath+ServersFilename, dataPath+countriesFilename, "")
 	client := request.NewStdHTTP()
+	validator, err := response.NewNordValidator()
+	if err != nil {
+		log.Fatalln("creating nord validator:", err)
+	}
+
 	api := core.NewDefaultAPI(
 		"",
 		daemon.BaseURL,
 		client,
-		response.NewNordValidator(response.NewFilePKVault(dataPath)),
+		validator,
 	)
 	netw := networker.NewCombined(
 		nil,
diff --git a/daemon/response/pk_vault.go b/daemon/response/pk_vault.go
deleted file mode 100644
index 29fe84f..0000000
--- a/daemon/response/pk_vault.go
+++ /dev/null
@@ -1,72 +0,0 @@
-package response
-
-import (
-	"crypto/rsa"
-	"crypto/x509"
-	"encoding/pem"
-	"fmt"
-	"os"
-	"sync"
-
-	"golang.org/x/crypto/ssh"
-)
-
-// PKVault is responsible for saving Public Keys
-type PKVault interface {
-	// Get returns RSA public key by specified ID
-	Get(id string) (ssh.PublicKey, error)
-}
-
-// FilePKVault loads RSA public keys from file and keeps them in memory
-type FilePKVault struct {
-	// directory defines a place where to look public key files for
-	directory string
-	keys      map[string]ssh.PublicKey
-	sync.Mutex
-}
-
-// NewFilePKVault returns a new instance of FilePKVault with public key map
-func NewFilePKVault(directory string) *FilePKVault {
-	return &FilePKVault{
-		directory: directory,
-		keys:      map[string]ssh.PublicKey{},
-	}
-}
-
-// Get returns RSA public key by specified ID. If key is not found in memory, loads and parses it from a file
-func (v *FilePKVault) Get(id string) (ssh.PublicKey, error) {
-	key, ok := v.keys[id]
-	if !ok {
-		filename := fmt.Sprintf("%s/%s.pub", v.directory, id)
-		// #nosec G304 -- no input comes from the user
-		rawKey, err := os.ReadFile(filename)
-		if err != nil {
-			return nil, fmt.Errorf("error reading file: %w", err)
-		}
-		rsaPub, err := parseRSAPublicKey(rawKey)
-		if err != nil {
-			return nil, fmt.Errorf("parsing RSA public key: %w", err)
-		}
-		key, _ = ssh.NewPublicKey(rsaPub)
-		v.Lock()
-		v.keys[id] = key
-		v.Unlock()
-	}
-	return key, nil
-}
-
-func parseRSAPublicKey(rawKey []byte) (*rsa.PublicKey, error) {
-	block, _ := pem.Decode(rawKey)
-	if block == nil {
-		return nil, fmt.Errorf("public key was not defined correctly")
-	}
-	pub, err := x509.ParsePKIXPublicKey(block.Bytes)
-	if err != nil {
-		return nil, fmt.Errorf("parsing DER encoded public key: %w", err)
-	}
-	publicKey, ok := pub.(*rsa.PublicKey)
-	if !ok {
-		return nil, fmt.Errorf("parsing RSA public key: %w", err)
-	}
-	return publicKey, nil
-}
diff --git a/daemon/response/pk_vault_test.go b/daemon/response/pk_vault_test.go
deleted file mode 100644
index cd894bd..0000000
--- a/daemon/response/pk_vault_test.go
+++ /dev/null
@@ -1,86 +0,0 @@
-package response
-
-import (
-	"testing"
-
-	"github.com/NordSecurity/nordvpn-linux/test/category"
-
-	"github.com/stretchr/testify/assert"
-	"golang.org/x/crypto/ssh"
-)
-
-const testDataDir = "testdata/rsa"
-
-func TestNewFileRSAVault(t *testing.T) {
-	category.Set(t, category.Unit)
-
-	tests := []string{
-		"some_dir_1",
-		"some_dir_2",
-	}
-	for _, test := range tests {
-		vault := NewFilePKVault(test)
-		assert.Equal(t, test, vault.directory)
-		assert.Equal(t, map[string]ssh.PublicKey{}, vault.keys)
-	}
-}
-
-func TestFileRSAVault_Get(t *testing.T) {
-	category.Set(t, category.File)
-
-	tests := []struct {
-		directory string
-		id        string
-		error     bool
-		key       bool
-	}{
-		{directory: testDataDir, id: "test-key-1", error: false, key: true},
-		{directory: "bad/path", id: "bad-id", error: true, key: false},
-		{directory: testDataDir, id: "bad-id", error: true, key: false},
-		{directory: testDataDir, id: "invalid-key", error: true, key: false},
-	}
-	for _, test := range tests {
-		vault := NewFilePKVault(test.directory)
-		key, err := vault.Get(test.id)
-		assert.True(t, test.error == (err != nil), err)
-		assert.True(t, test.key == (key != nil), key)
-	}
-}
-
-func TestParseRSAPublicKey(t *testing.T) {
-	category.Set(t, category.Unit)
-
-	rsaKey := `-----BEGIN PUBLIC KEY-----
-MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCgiLXcdcJ3ptUZdxfSnj4kP+HG
-10yJxkAJaDtYx77SCUHVbE+F3GPsv3ZBR6zl5dpRPacMsOCrLb4+b/r6fl91DSnE
-KATF5EpgDp1a143lkIoUcLtdNtJTLnarNJCsdPT5mLFQMV/gK6io/J+3qt4f3Fef
-5COsl7j57745RU0BzQIDAQAB
------END PUBLIC KEY-----`
-	emptyKey := `-----BEGIN PUBLIC KEY-----
------END PUBLIC KEY-----`
-	dsaKey := `-----BEGIN PUBLIC KEY-----
-MIHxMIGpBgcqhkjOOAQBMIGdAkEAzDCu2OXlAVJseBNhyqGtCF6P2+1+a9Ebuq1u
-yegAhha17+tv8raVr/J+6srgXftgra7BYbRK9yy3XkWy4s+YfQIVAJpSnzjM4Iz7
-stq+nhJPrBe7S515AkEAyl/PGS9pfN7Sum8hOkDvTnapQRjEf5rm1Qq0ZjdxwJwV
-oySuArW/Y0mqhGOJFKsriXuOca+j5BOfIBbwqjgE1ANDAAJAQxTYeiZkxeVAGhxv
-FsMVhJb7w0dV2W0ssMEWiyQ7BtnPTgvyUJnQBJn+WmuQp4Er7Kov93JD/nNTGSvB
-hdDkhA==
------END PUBLIC KEY-----`
-
-	category.Set(t, category.Unit)
-	tests := []struct {
-		input string
-		key   bool
-		error bool
-	}{
-		{input: rsaKey, key: true, error: false},
-		{input: "some invalid format", key: false, error: true},
-		{input: emptyKey, key: false, error: true},
-		{input: dsaKey, key: false, error: true},
-	}
-	for _, test := range tests {
-		key, err := parseRSAPublicKey([]byte(test.input))
-		assert.True(t, test.error == (err != nil), err)
-		assert.True(t, test.key == (key != nil), key)
-	}
-}
diff --git a/contrib/rsa/rsa-key-1.pub b/daemon/response/rsa-key-1.pub
similarity index 100%
rename from contrib/rsa/rsa-key-1.pub
rename to daemon/response/rsa-key-1.pub
diff --git a/daemon/response/testdata/rsa/invalid-key.pub b/daemon/response/testdata/rsa/invalid-key.pub
deleted file mode 100644
index cf0332a..0000000
--- a/daemon/response/testdata/rsa/invalid-key.pub
+++ /dev/null
@@ -1 +0,0 @@
-This is an invalid public key
\ No newline at end of file
diff --git a/daemon/response/testdata/rsa/test-key-1.pub b/daemon/response/testdata/rsa/test-key-1.pub
deleted file mode 100644
index f2cac62..0000000
--- a/daemon/response/testdata/rsa/test-key-1.pub
+++ /dev/null
@@ -1,6 +0,0 @@
------BEGIN PUBLIC KEY-----
-MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCCj1oVRdZQ9SvZwMNuWi6LO5ra
-PQ4yOf0c2Z+NvU+hxDzTMS4gID4O5Bn+4IpyJ2/jbmfyePdqgCRwwEBxixtyMVjq
-zTN2eBd9ffeYmqE9cTdOiJkqdBy/fZa7ItKeBLDllE3siRoeoe9+dABWJV4gBtya
-xliUwgkbcsyWeiCmLwIDAQAB
------END PUBLIC KEY-----
\ No newline at end of file
diff --git a/daemon/response/validate.go b/daemon/response/validate.go
index 6d75e59..38d208b 100644
--- a/daemon/response/validate.go
+++ b/daemon/response/validate.go
@@ -2,8 +2,12 @@
 package response
 
 import (
+	"crypto/rsa"
 	"crypto/sha256"
+	"crypto/x509"
+	_ "embed"
 	"encoding/base64"
+	"encoding/pem"
 	"fmt"
 	"net/http"
 	"strconv"
@@ -13,23 +17,32 @@ import (
 	"golang.org/x/crypto/ssh"
 )
 
+//go:embed rsa-key-1.pub
+var rsaKey1 []byte
+
 type Validator interface {
 	// Validate validates headers.
 	Validate(code int, headers http.Header, body []byte) error
 }
 
 type NordValidator struct {
-	vault PKVault
+	pubKeys map[string]ssh.PublicKey
 }
 
 type NoopValidator struct{}
 
 func (NoopValidator) Validate(int, http.Header, []byte) error { return nil }
 
-func NewNordValidator(vault PKVault) *NordValidator {
-	return &NordValidator{
-		vault: vault,
+func NewNordValidator() (*NordValidator, error) {
+	rsaKey1Pub, err := parseSSHPublicKey(rsaKey1)
+	if err != nil {
+		return nil, fmt.Errorf("parsing rsa-key-1: %w", err)
 	}
+	return &NordValidator{
+		pubKeys: map[string]ssh.PublicKey{
+			"rsa-key-1": rsaKey1Pub,
+		},
+	}, nil
 }
 
 // Validate validates that the response came from actual NordVPN API
@@ -82,9 +95,10 @@ func (v *NordValidator) Validate(code int, headers http.Header, body []byte) err
 	}
 
 	// Verify X-Signature
-	publicKey, err := v.vault.Get(keyVal["key-id"])
-	if err != nil {
-		return fmt.Errorf("retrieving public key from vault: %w", err)
+	keyID := keyVal["key-id"]
+	publicKey, ok := v.pubKeys[keyID]
+	if !ok {
+		return fmt.Errorf("pub key '%s' is not known", keyID)
 	}
 
 	signature, err := base64.StdEncoding.DecodeString(xSignature)
@@ -98,6 +112,34 @@ func (v *NordValidator) Validate(code int, headers http.Header, body []byte) err
 	})
 }
 
+func parseSSHPublicKey(rawKey []byte) (ssh.PublicKey, error) {
+	rsaPub, err := parseRSAPublicKey(rawKey)
+	if err != nil {
+		return nil, fmt.Errorf("parsing RSA pub key: %w", err)
+	}
+	publicKey, err := ssh.NewPublicKey(rsaPub)
+	if err != nil {
+		return nil, fmt.Errorf("converting to SSH public key: %w", err)
+	}
+	return publicKey, nil
+}
+
+func parseRSAPublicKey(rawKey []byte) (*rsa.PublicKey, error) {
+	block, _ := pem.Decode(rawKey)
+	if block == nil {
+		return nil, fmt.Errorf("public key was not defined correctly")
+	}
+	pub, err := x509.ParsePKIXPublicKey(block.Bytes)
+	if err != nil {
+		return nil, fmt.Errorf("parsing DER encoded public key: %w", err)
+	}
+	publicKey, ok := pub.(*rsa.PublicKey)
+	if !ok {
+		return nil, fmt.Errorf("parsing RSA public key: %w", err)
+	}
+	return publicKey, nil
+}
+
 func parseKeyVal(str string) (map[string]string, error) {
 	keyVal := map[string]string{}
 	pairs := strings.Split(str, ",")
@@ -115,7 +157,7 @@ func parseKeyVal(str string) (map[string]string, error) {
 func getSignAlgoName(name string) string {
 	switch name {
 	case "rsa-sha256":
-		return ssh.SigAlgoRSASHA2256
+		return ssh.KeyAlgoRSASHA256
 	}
 	return ""
 }
diff --git a/daemon/response/validate_test.go b/daemon/response/validate_test.go
index 3f9f66b..afb2a25 100644
--- a/daemon/response/validate_test.go
+++ b/daemon/response/validate_test.go
@@ -76,7 +76,7 @@ func TestGetSignAlgoName(t *testing.T) {
 		input  string
 		output string
 	}{
-		{input: "rsa-sha256", output: ssh.SigAlgoRSASHA2256},
+		{input: "rsa-sha256", output: ssh.KeyAlgoRSASHA256},
 		{input: "rsa-md5", output: ""},
 		{input: "invalid", output: ""},
 	}
@@ -119,6 +119,15 @@ func validHeaders(data []byte) http.Header {
 	return headers
 }
 
+func TestNewNordValidator(t *testing.T) {
+	category.Set(t, category.Unit)
+	validator, err := NewNordValidator()
+	key, ok := validator.pubKeys["rsa-key-1"]
+	assert.NoError(t, err)
+	assert.True(t, ok)
+	assert.NotNil(t, key)
+}
+
 func TestNordValidator_Validate(t *testing.T) {
 	category.Set(t, category.Unit)
 	sampleData := []byte(`"foo": "bar"`)
@@ -155,9 +164,52 @@ func TestNordValidator_Validate(t *testing.T) {
 	}
 	for i, test := range tests {
 		t.Run(strconv.Itoa(i), func(t *testing.T) {
-			validator := NewNordValidator(mock.PKVault{PublicKey: publicKey})
+			mock.GenerateKeyPair()
+			validator := NordValidator{
+				pubKeys: map[string]ssh.PublicKey{
+					"test-key": publicKey,
+				},
+			}
 			err := validator.Validate(test.code, test.headers, test.data)
 			assert.True(t, test.error == (err != nil), err)
 		})
 	}
 }
+
+func TestParseRSAPublicKey(t *testing.T) {
+	category.Set(t, category.Unit)
+
+	rsaKey := `-----BEGIN PUBLIC KEY-----
+MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCgiLXcdcJ3ptUZdxfSnj4kP+HG
+10yJxkAJaDtYx77SCUHVbE+F3GPsv3ZBR6zl5dpRPacMsOCrLb4+b/r6fl91DSnE
+KATF5EpgDp1a143lkIoUcLtdNtJTLnarNJCsdPT5mLFQMV/gK6io/J+3qt4f3Fef
+5COsl7j57745RU0BzQIDAQAB
+-----END PUBLIC KEY-----`
+	emptyKey := `-----BEGIN PUBLIC KEY-----
+-----END PUBLIC KEY-----`
+	dsaKey := `-----BEGIN PUBLIC KEY-----
+MIHxMIGpBgcqhkjOOAQBMIGdAkEAzDCu2OXlAVJseBNhyqGtCF6P2+1+a9Ebuq1u
+yegAhha17+tv8raVr/J+6srgXftgra7BYbRK9yy3XkWy4s+YfQIVAJpSnzjM4Iz7
+stq+nhJPrBe7S515AkEAyl/PGS9pfN7Sum8hOkDvTnapQRjEf5rm1Qq0ZjdxwJwV
+oySuArW/Y0mqhGOJFKsriXuOca+j5BOfIBbwqjgE1ANDAAJAQxTYeiZkxeVAGhxv
+FsMVhJb7w0dV2W0ssMEWiyQ7BtnPTgvyUJnQBJn+WmuQp4Er7Kov93JD/nNTGSvB
+hdDkhA==
+-----END PUBLIC KEY-----`
+
+	category.Set(t, category.Unit)
+	tests := []struct {
+		input string
+		key   bool
+		error bool
+	}{
+		{input: rsaKey, key: true, error: false},
+		{input: "some invalid format", key: false, error: true},
+		{input: emptyKey, key: false, error: true},
+		{input: dsaKey, key: false, error: true},
+	}
+	for _, test := range tests {
+		key, err := parseRSAPublicKey([]byte(test.input))
+		assert.True(t, test.error == (err != nil), err)
+		assert.True(t, test.key == (key != nil), key)
+	}
+}
-- 
2.34.1

